usage: ./main input_type

The input object is read on stdin, and the result of the
transform to sent to stdout.  input_type determines the type
of input and output:

  arg:   input:         output:
  -vc    V-Cone         H-Cone
  -vp    V-Polyhedra    H-Polyhedra
  -hc    V-Cone         H-Cone
  -hp    V-Polyhedra    H-Polyhedra

input format is as follows:
  hcone := dimension   ws (vector ws)*  
  vcone := dimension   ws (vector ws)*  
  hpoly := dimension+1 ws (vector ws constraint ws)*  
  vpoly := dimension   ws ('U' | 'V') ws vpoly_vecs*

  ws         := whitespace, as would be read by "cin >> ws;"
  dimension  := a positive integer.  For hpoly, add one to
                the dimension of the space (this extra
                dimension is for the constraint)
  vector     := (dimension) doubles separated by whitespace  
  constraint := a double (the value b_i in <A_i,x> <= b_i)  
  'V' | 'U'  := the literal character 'U' or 'V'
  vpoly_vecs := (['U'] ws vector) | (['V'] ws vector)

VPOLY ONLY:

  vpoly contains two matrices:
    U - contains the rays of the vpolyhedron
    V - contains the points of the vpolyhedron

  On input, enter 'U' or 'V' to indicate which matrix should
  receive the vectors that follow.  You can switch back and
  forth as you like, but either 'U' or 'V' must be entered
  before starting to input vectors.

EXAMPLES:

$ ./main -vc <<< "2 1 0"

OUTPUT:

2
-0 -1 
0 1 
0 0 
-1 0 

$ ./main -hc <<< "2 1 0 0 1"

OUTPUT:

2
-1 0 
0 0 
0 0 
0 -1 

$ ./main -vp <<< "2 U 1 0 V 0 0 1 1"

OUTPUT:

3
0 0 -0 
0 0 -0 
0 1 1 
0 0 1 
-1 1 -0 
-1 0 -0 
0 0 -0 
0 -1 -0 
$ ./main -hp <<< "3 0 -1 0 0 1 1 -1 1 0"

OUTPUT:

2
U
1 0 
0 0 
0 0 
0 0 
V
0 0 
1 1 
